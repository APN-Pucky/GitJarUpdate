/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.neuwirthinformatik.Alexander.GitJarUpdate;

import java.awt.Image;
import java.io.IOException;

import javax.swing.JOptionPane;

import org.json.JSONArray;
import org.json.JSONObject;


public class Update {
	

	public static void main(String[] args)
	{
		loadUpdate("TeXCalc-all.jar","APN-Pucky","TeXCalc");
	}
	
    public boolean someLibraryMethod() {
        return true;
    }
	

    public static void loadUpdate(String fname, String github_user,String github_project)
	{
    	StreamUtil.copyFile("new-" + fname,fname);
		String up = checkUpdates(github_user,github_project);
		if(!up.equals(""))
		{
			int selection = JOptionPane.showConfirmDialog(null, up,"Update",JOptionPane.OK_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
			if(selection == JOptionPane.OK_OPTION)update(fname,github_user,github_project);
		}
	}
    
    public static String checkUpdates(String github_user,String github_project)
	{
		String ret = "";
		String jsf = "git_jar_version.json";
		Wget.wGet(jsf, "https://api.github.com/repos/" + github_user + "/" + github_project + "/releases/latest");
		String tumjson=StreamUtil.readFile(jsf).replaceAll("\n", "");
		JSONObject tum = new JSONObject(tumjson);
		String tum_tag_name = tum.getString("tag_name");	
		if(!tum_tag_name.equals(Info.VERSION) && !Info.VERSION.equals( "9999"))
		{
			ret += "New version: " + tum_tag_name + " available:\n";
			ret += " - " + tum.getString("name") + "\n";
			ret += "Current version: " + Info.VERSION;
		}
		
		return ret;
	}
    
    public static void update(String fname, String github_user, String github_project)
	{
		//TUM
		System.out.println("Downloading new version ...");
		//Task.start(() -> Wget.wGet("TUM-new.jar", "https://drive.google.com/uc?export=download&id=0BxMgxg5B0xsDYWhMamxQR0hTZjQ"));		
		String jsf = "git_jar_version.json";
		Wget.wGet(jsf, "https://api.github.com/repos/" + github_user + "/" + github_project + "/releases/latest");
		String tumjson=StreamUtil.readFile(jsf).replaceAll("\n", "");
		JSONArray jsa= (new JSONObject(tumjson)).getJSONArray("assets");	
		String name="";
		for(int i = 0; i < jsa.length(); ++i) {
			JSONObject jso = jsa.getJSONObject(i);
			name = jso.getString("name");
			if(name.startsWith(fname)) {
				final String nname = name;
			Task.start(() -> {
				Wget.wGet("new-" + nname, jso.getString("browser_download_url")); 
			//decryptFile("TUM-enc.jar", "TUM-new.jar");
			});
			break;
			}
		}
		
		//Restart
		ProcessBuilder builder = new ProcessBuilder("java", "-jar", "new-" + name);
        builder.redirectError(ProcessBuilder.Redirect.INHERIT);
        builder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
        System.out.println("Waiting for all Processes to end...");
        Task.sleepForAll();
        System.out.println("Everything updated. Restarting");
        try {
			Process p = builder.start();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        System.exit(0);
	}

}
